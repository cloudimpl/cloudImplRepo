/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cloudimpl.msgs.raft;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AppendEntry extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AppendEntry\",\"namespace\":\"com.cloudimpl.msgs.raft\",\"fields\":[{\"name\":\"term\",\"type\":\"int\"},{\"name\":\"leader_id\",\"type\":[\"string\",\"null\"]},{\"name\":\"previous_log_index\",\"type\":\"int\"},{\"name\":\"previous_log_term\",\"type\":\"int\"},{\"name\":\"entries\",\"type\":{\"type\":\"array\",\"items\":\"AppendEntry\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int term;
  @Deprecated public java.lang.CharSequence leader_id;
  @Deprecated public int previous_log_index;
  @Deprecated public int previous_log_term;
  @Deprecated public java.util.List<com.cloudimpl.msgs.raft.AppendEntry> entries;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AppendEntry() {}

  /**
   * All-args constructor.
   */
  public AppendEntry(java.lang.Integer term, java.lang.CharSequence leader_id, java.lang.Integer previous_log_index, java.lang.Integer previous_log_term, java.util.List<com.cloudimpl.msgs.raft.AppendEntry> entries) {
    this.term = term;
    this.leader_id = leader_id;
    this.previous_log_index = previous_log_index;
    this.previous_log_term = previous_log_term;
    this.entries = entries;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return term;
    case 1: return leader_id;
    case 2: return previous_log_index;
    case 3: return previous_log_term;
    case 4: return entries;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: term = (java.lang.Integer)value$; break;
    case 1: leader_id = (java.lang.CharSequence)value$; break;
    case 2: previous_log_index = (java.lang.Integer)value$; break;
    case 3: previous_log_term = (java.lang.Integer)value$; break;
    case 4: entries = (java.util.List<com.cloudimpl.msgs.raft.AppendEntry>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'term' field.
   */
  public java.lang.Integer getTerm() {
    return term;
  }

  /**
   * Sets the value of the 'term' field.
   * @param value the value to set.
   */
  public void setTerm(java.lang.Integer value) {
    this.term = value;
  }

  /**
   * Gets the value of the 'leader_id' field.
   */
  public java.lang.CharSequence getLeaderId() {
    return leader_id;
  }

  /**
   * Sets the value of the 'leader_id' field.
   * @param value the value to set.
   */
  public void setLeaderId(java.lang.CharSequence value) {
    this.leader_id = value;
  }

  /**
   * Gets the value of the 'previous_log_index' field.
   */
  public java.lang.Integer getPreviousLogIndex() {
    return previous_log_index;
  }

  /**
   * Sets the value of the 'previous_log_index' field.
   * @param value the value to set.
   */
  public void setPreviousLogIndex(java.lang.Integer value) {
    this.previous_log_index = value;
  }

  /**
   * Gets the value of the 'previous_log_term' field.
   */
  public java.lang.Integer getPreviousLogTerm() {
    return previous_log_term;
  }

  /**
   * Sets the value of the 'previous_log_term' field.
   * @param value the value to set.
   */
  public void setPreviousLogTerm(java.lang.Integer value) {
    this.previous_log_term = value;
  }

  /**
   * Gets the value of the 'entries' field.
   */
  public java.util.List<com.cloudimpl.msgs.raft.AppendEntry> getEntries() {
    return entries;
  }

  /**
   * Sets the value of the 'entries' field.
   * @param value the value to set.
   */
  public void setEntries(java.util.List<com.cloudimpl.msgs.raft.AppendEntry> value) {
    this.entries = value;
  }

  /** Creates a new AppendEntry RecordBuilder */
  public static com.cloudimpl.msgs.raft.AppendEntry.Builder newBuilder() {
    return new com.cloudimpl.msgs.raft.AppendEntry.Builder();
  }
  
  /** Creates a new AppendEntry RecordBuilder by copying an existing Builder */
  public static com.cloudimpl.msgs.raft.AppendEntry.Builder newBuilder(com.cloudimpl.msgs.raft.AppendEntry.Builder other) {
    return new com.cloudimpl.msgs.raft.AppendEntry.Builder(other);
  }
  
  /** Creates a new AppendEntry RecordBuilder by copying an existing AppendEntry instance */
  public static com.cloudimpl.msgs.raft.AppendEntry.Builder newBuilder(com.cloudimpl.msgs.raft.AppendEntry other) {
    return new com.cloudimpl.msgs.raft.AppendEntry.Builder(other);
  }
  
  /**
   * RecordBuilder for AppendEntry instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AppendEntry>
    implements org.apache.avro.data.RecordBuilder<AppendEntry> {

    private int term;
    private java.lang.CharSequence leader_id;
    private int previous_log_index;
    private int previous_log_term;
    private java.util.List<com.cloudimpl.msgs.raft.AppendEntry> entries;

    /** Creates a new Builder */
    private Builder() {
      super(com.cloudimpl.msgs.raft.AppendEntry.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cloudimpl.msgs.raft.AppendEntry.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.term)) {
        this.term = data().deepCopy(fields()[0].schema(), other.term);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.leader_id)) {
        this.leader_id = data().deepCopy(fields()[1].schema(), other.leader_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.previous_log_index)) {
        this.previous_log_index = data().deepCopy(fields()[2].schema(), other.previous_log_index);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.previous_log_term)) {
        this.previous_log_term = data().deepCopy(fields()[3].schema(), other.previous_log_term);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.entries)) {
        this.entries = data().deepCopy(fields()[4].schema(), other.entries);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AppendEntry instance */
    private Builder(com.cloudimpl.msgs.raft.AppendEntry other) {
            super(com.cloudimpl.msgs.raft.AppendEntry.SCHEMA$);
      if (isValidValue(fields()[0], other.term)) {
        this.term = data().deepCopy(fields()[0].schema(), other.term);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.leader_id)) {
        this.leader_id = data().deepCopy(fields()[1].schema(), other.leader_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.previous_log_index)) {
        this.previous_log_index = data().deepCopy(fields()[2].schema(), other.previous_log_index);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.previous_log_term)) {
        this.previous_log_term = data().deepCopy(fields()[3].schema(), other.previous_log_term);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.entries)) {
        this.entries = data().deepCopy(fields()[4].schema(), other.entries);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'term' field */
    public java.lang.Integer getTerm() {
      return term;
    }
    
    /** Sets the value of the 'term' field */
    public com.cloudimpl.msgs.raft.AppendEntry.Builder setTerm(int value) {
      validate(fields()[0], value);
      this.term = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'term' field has been set */
    public boolean hasTerm() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'term' field */
    public com.cloudimpl.msgs.raft.AppendEntry.Builder clearTerm() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'leader_id' field */
    public java.lang.CharSequence getLeaderId() {
      return leader_id;
    }
    
    /** Sets the value of the 'leader_id' field */
    public com.cloudimpl.msgs.raft.AppendEntry.Builder setLeaderId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.leader_id = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'leader_id' field has been set */
    public boolean hasLeaderId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'leader_id' field */
    public com.cloudimpl.msgs.raft.AppendEntry.Builder clearLeaderId() {
      leader_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'previous_log_index' field */
    public java.lang.Integer getPreviousLogIndex() {
      return previous_log_index;
    }
    
    /** Sets the value of the 'previous_log_index' field */
    public com.cloudimpl.msgs.raft.AppendEntry.Builder setPreviousLogIndex(int value) {
      validate(fields()[2], value);
      this.previous_log_index = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'previous_log_index' field has been set */
    public boolean hasPreviousLogIndex() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'previous_log_index' field */
    public com.cloudimpl.msgs.raft.AppendEntry.Builder clearPreviousLogIndex() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'previous_log_term' field */
    public java.lang.Integer getPreviousLogTerm() {
      return previous_log_term;
    }
    
    /** Sets the value of the 'previous_log_term' field */
    public com.cloudimpl.msgs.raft.AppendEntry.Builder setPreviousLogTerm(int value) {
      validate(fields()[3], value);
      this.previous_log_term = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'previous_log_term' field has been set */
    public boolean hasPreviousLogTerm() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'previous_log_term' field */
    public com.cloudimpl.msgs.raft.AppendEntry.Builder clearPreviousLogTerm() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'entries' field */
    public java.util.List<com.cloudimpl.msgs.raft.AppendEntry> getEntries() {
      return entries;
    }
    
    /** Sets the value of the 'entries' field */
    public com.cloudimpl.msgs.raft.AppendEntry.Builder setEntries(java.util.List<com.cloudimpl.msgs.raft.AppendEntry> value) {
      validate(fields()[4], value);
      this.entries = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'entries' field has been set */
    public boolean hasEntries() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'entries' field */
    public com.cloudimpl.msgs.raft.AppendEntry.Builder clearEntries() {
      entries = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public AppendEntry build() {
      try {
        AppendEntry record = new AppendEntry();
        record.term = fieldSetFlags()[0] ? this.term : (java.lang.Integer) defaultValue(fields()[0]);
        record.leader_id = fieldSetFlags()[1] ? this.leader_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.previous_log_index = fieldSetFlags()[2] ? this.previous_log_index : (java.lang.Integer) defaultValue(fields()[2]);
        record.previous_log_term = fieldSetFlags()[3] ? this.previous_log_term : (java.lang.Integer) defaultValue(fields()[3]);
        record.entries = fieldSetFlags()[4] ? this.entries : (java.util.List<com.cloudimpl.msgs.raft.AppendEntry>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
